// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/zulkan/kraicklist/domain"
)

// RecordRepository is an autogenerated mock type for the RecordRepository type
type RecordRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *RecordRepository) Count() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *RecordRepository) FindAll() ([]domain.Record, error) {
	ret := _m.Called()

	var r0 []domain.Record
	if rf, ok := ret.Get(0).(func() []domain.Record); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllTitle provides a mock function with given fields:
func (_m *RecordRepository) FindAllTitle() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// FindByTitle provides a mock function with given fields: title
func (_m *RecordRepository) FindByTitle(title string) (*domain.Record, error) {
	ret := _m.Called(title)

	var r0 *domain.Record
	if rf, ok := ret.Get(0).(func(string) *domain.Record); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
